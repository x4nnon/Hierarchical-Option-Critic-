/home/x4nno_desktop/anaconda3/envs/fracos_ppo/lib/python3.9/site-packages/gym/utils/passive_env_checker.py:174: UserWarning: [33mWARN: Future gym versions will require that `Env.reset` can be passed a `seed` instead of using `Env.seed` for resetting the environment random number generator.
  logger.warn(
/home/x4nno_desktop/anaconda3/envs/fracos_ppo/lib/python3.9/site-packages/gym/utils/passive_env_checker.py:187: UserWarning: [33mWARN: Future gym versions will require that `Env.reset` can be passed `options` to allow the environment initialisation to be passed additional information.
  logger.warn(
/home/x4nno_desktop/anaconda3/envs/fracos_ppo/lib/python3.9/site-packages/gym/utils/passive_env_checker.py:195: UserWarning: [33mWARN: The result returned by `env.reset()` was not a tuple of the form `(obs, info)`, where `obs` is a observation and `info` is a dictionary containing additional information. Actual type: `<class 'numpy.ndarray'>`
  logger.warn(
/home/x4nno_desktop/anaconda3/envs/fracos_ppo/lib/python3.9/site-packages/gym/utils/passive_env_checker.py:219: DeprecationWarning: [33mWARN: Core environment is written in old step API which returns one bool instead of two. It is recommended to rewrite the environment with new step API. 
  logger.deprecation(
/home/x4nno_desktop/anaconda3/envs/fracos_ppo/lib/python3.9/site-packages/gym/utils/passive_env_checker.py:225: DeprecationWarning: `np.bool8` is a deprecated alias for `np.bool_`.  (Deprecated NumPy 1.24)
  if not isinstance(done, (bool, np.bool8)):
global_step=488, ep_r=[3.], ep_l=[62]
global_step=632, ep_r=[2.], ep_l=[80]
global_step=632, ep_r=[2.], ep_l=[80]
global_step=704, ep_r=[1.], ep_l=[89]
global_step=704, ep_r=[3.], ep_l=[89]
global_step=1064, ep_r=[2.], ep_l=[134]
global_step=1136, ep_r=[4.], ep_l=[81]
global_step=1256, ep_r=[6.], ep_l=[158]
global_step=1312, ep_r=[1.], ep_l=[85]
global_step=1328, ep_r=[4.], ep_l=[167]
global_step=1336, ep_r=[4.], ep_l=[79]
global_step=1440, ep_r=[1.], ep_l=[92]
Traceback (most recent call last):
  File "/home/x4nno_desktop/Documents/HOC/methods/HOC.py", line 360, in <module>
    main_training_loop(agent, args, writer, envs, device)
  File "/home/x4nno_desktop/Documents/HOC/methods/HOC.py", line 322, in main_training_loop
    total_loss = agent.update_function(batch, args, writer, global_step_truth, envs)
  File "/home/x4nno_desktop/Documents/HOC/OC_agents/HOC_agent.py", line 381, in update_function
    mini_batch_size = args.mini_batch_size
AttributeError: 'Args' object has no attribute 'mini_batch_size'
Traceback (most recent call last):
  File "/home/x4nno_desktop/Documents/HOC/methods/HOC.py", line 360, in <module>
    main_training_loop(agent, args, writer, envs, device)
  File "/home/x4nno_desktop/Documents/HOC/methods/HOC.py", line 322, in main_training_loop
    total_loss = agent.update_function(batch, args, writer, global_step_truth, envs)
  File "/home/x4nno_desktop/Documents/HOC/OC_agents/HOC_agent.py", line 381, in update_function
    mini_batch_size = args.mini_batch_size
AttributeError: 'Args' object has no attribute 'mini_batch_size'
global_step=1776, ep_r=[0.], ep_l=[89]
global_step=1776, ep_r=[0.], ep_l=[56]
global_step=1800, ep_r=[4.], ep_l=[83]
global_step=1800, ep_r=[2.], ep_l=[146]
global_step=1952, ep_r=[2.], ep_l=[77]